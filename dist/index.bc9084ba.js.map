{"mappings":"AAAA,oCAAoC;AACpC,mCAAmC;AAGnC,MAAM;IAOF,YAAY,EAAU,EAAE,IAAY,EAAE,KAAa,EAAE,QAAgB,EAAE,KAAa,CAAE;QAClF,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,CAAC,KAAK,GAAG;IACjB;AAEJ;AAMA,IAAI,OAAe,EAAE;AAGrB,IAAI,gBAA+B,aAAa,OAAO,CAAC;AAExD,IAAI,kBAAkB,IAAI,EACtB,gBAAgB;AAGpB,OAAO,KAAK,KAAK,CAAC,eAAe,GAAG,CAAC,CAAC,WAAmB;IACrD,OAAO,IAAI,KACP,SAAS,EAAE,EACX,SAAS,IAAI,EACb,SAAS,KAAK,EACd,SAAS,QAAQ,EACjB,SAAS,KAAK;AACtB;AAEA,SAAS,WAAW;IAEhB,SAAS,cAAc,CAAC,cAAc,iBAAiB,SAAS,WAAY;QACxE;IACJ;IAEA,IAAI,gBAAgB,SAAS,aAAa,CAAC;IAC3C,cAAc,SAAS,GAAG;IAE1B,KAAK,IAAI,QAAQ,KAAM;QAEnB,IAAI,WAAW,CAAC,8CACoB,EAAE,KAAK,EAAE,CAAC,kCACxB,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE,KAAK,IAAI,CAAC,wGAE/B,EAAE,KAAK,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,CAAC,qDACnC,EAAE,KAAK,KAAK,CAAC,OAAO,CAAC,GAAG,6HAGvB,EAAE,KAAK,EAAE,CAAC,yBAAyB,EAAE,KAAK,QAAQ,CAAC,sFAChB,EAAE,KAAK,EAAE,CAAC,mGACd,EAAE,KAAK,EAAE,CAAC,4CAEhF,CAAC;QAEC,kCAAkC;QAClC,cAAc,SAAS,IAAI;IAC/B;AAGJ;AAGA,SAAS,eAAe,KAAU,EAAE,MAAc,EAAE;IAChD,MAAM,cAAc;IACpB,2CAA2C;IAC3C,KAAK,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,IAAI,QAAQ,QAAQ,GAAG,SAAS,SAAS,aAAa,CAAC,cAAc,QAAQ,KAAK;IACrG;AAEJ;AAEA,SAAS,gBAAgB;IACrB,aAAa,OAAO,CAAC,QAAQ,KAAK,SAAS,CAAC;AAChD;AAEA,SAAS,WAAW,KAAU,EAAE,MAAc,EAAE;IAC5C,MAAM,cAAc;IACpB,gCAAgC;IAChC,IAAI,WAAW,SAAS,aAAa,CAAC,eAAe;IACrD,SAAS,MAAM;IAEf,IAAI,QAAQ,KAAK,SAAS,CAAC,CAAA,IAAK,EAAE,EAAE,IAAI;IACxC,KAAK,MAAM,CAAC,OAAO;IACnB;AACJ;AAGA,SAAS,UAAU,EAAU,EAAE,IAAY,EAAE,KAAa,EAAE,KAAa,EAAE;IAEvE,IAAI,WAAW,KAAK,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,IAAI;IAEtC,IAAI,YAAY,WAAW;QACvB,IAAI,UAAU,IAAI,KAAK,IAAI,MAAM,OAAO,GAAG;QAC3C,KAAK,IAAI,CAAC;IACd,OAEI,SAAS,QAAQ,IAAI;IAGzB;IACA;AACJ;AAGA,SAAS,iBAAiB;IACtB,SAAS,cAAc,CAAC,cAAc,UAAU,MAAM,CAAC;AAC3D","sources":["src/main.ts"],"sourcesContent":["//import { Cart } from \"./class.js\";\r\n///import bilder from './bilder/*';\r\n\r\n\r\nclass Cart {\r\n    id: number\r\n    name: string\r\n    price: number\r\n    quantity: number\r\n    image: string\r\n\r\n    constructor(id: number, name: string, price: number, quantity: number, image: string) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.price = price;\r\n        this.quantity = quantity;\r\n        this.image = image;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlet cart: Cart[] = [];\r\n\r\n\r\nlet cartInStorage: string | null = localStorage.getItem('cart')\r\n\r\nif (cartInStorage === null) {\r\n    cartInStorage = ''\r\n}\r\n\r\ncart = JSON.parse(cartInStorage).map((cartItem: Cart) => {\r\n    return new Cart(\r\n        cartItem.id,\r\n        cartItem.name,\r\n        cartItem.price,\r\n        cartItem.quantity,\r\n        cartItem.image);\r\n});\r\n\r\nfunction loadCart() {\r\n\r\n    document.getElementById('cart-icon')?.addEventListener('click', function () {\r\n        toggleCartList()\r\n    });\r\n\r\n    let cartContainer = document.querySelector('.cart-container');\r\n    cartContainer.innerHTML = '';\r\n\r\n    for (let item of cart) {\r\n\r\n        let itemHTML = `\r\n        <div class=\"cart-item\" id=\"cart-item${item.id}\">\r\n          <img src=\"../bilder/${item.image}\" alt=\"${item.name}\" class=\"cart-item__image\">\r\n          <div class=\"cart-item__details\">\r\n            <span id=\"item-name${item.id}\" class=\"cart-item__name\">${item.name}</span>\r\n            <span class=\"cart-item__price\">$${item.price.toFixed(2)}</span>\r\n          </div>\r\n            <label for=\"quantity\">Quantity:</label>\r\n            <input type=\"number\" id=\"quantity${item.id}\" name=\"quantity\" value=\"${item.quantity}\" />\r\n            <button class=\"cart-item__update-btn\" onclick=\"updateQuantity(event,${item.id})\" > Update </button>\r\n            <button class=\"cart-item__remove-btn\" onclick=\"removeItem(event,${item.id})\"> Remove </button>\r\n        </div>\r\n      `;\r\n\r\n        // append the itemHTML to the cart\r\n        cartContainer.innerHTML += itemHTML;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nfunction updateQuantity(event: any, itemId: number) {\r\n    event.preventDefault();\r\n    // Update the item quantity and total price\r\n    cart.find(x => x.id == itemId).quantity = parseInt(document.querySelector('#quantity' + itemId).value);\r\n    updateStorage();\r\n\r\n}\r\n\r\nfunction updateStorage() {\r\n    localStorage.setItem('cart', JSON.stringify(cart));\r\n}\r\n\r\nfunction removeItem(event: any, itemId: number) {\r\n    event.preventDefault();\r\n    // Remove the item from the cart\r\n    let cartItem = document.querySelector('#cart-item' + itemId);\r\n    cartItem.remove();\r\n\r\n    let index = cart.findIndex(x => x.id == itemId);\r\n    cart.splice(index, 1);\r\n    updateStorage();\r\n}\r\n\r\n\r\nfunction addToCart(id: number, name: string, price: number, image: string) {\r\n\r\n    let isInCart = cart.find(x => x.id == id);\r\n\r\n    if (isInCart == undefined) {\r\n        let newItem = new Cart(id, name, price, 1, image);\r\n        cart.push(newItem);\r\n    }\r\n    else {\r\n        isInCart.quantity += 1;\r\n    }\r\n\r\n    updateStorage();\r\n    loadCart();\r\n}\r\n\r\n\r\nfunction toggleCartList() {\r\n    document.getElementById('cart-list')?.classList.toggle(\"cart-list-view\");\r\n}\r\n"],"names":[],"version":3,"file":"index.bc9084ba.js.map","sourceRoot":"/__parcel_source_root/"}